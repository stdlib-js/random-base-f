// Copyright (c) 2024 The Stdlib Authors. License is Apache-2.0: http://www.apache.org/licenses/LICENSE-2.0
/// <reference types="./index.d.ts" />
import e from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-nonenumerable-read-only-property@v0.1.0-esm/index.mjs";import t from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-nonenumerable-read-only-accessor@v0.1.0-esm/index.mjs";import n from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-nonenumerable-read-write-accessor@v0.1.1-esm/index.mjs";import s from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-plain-object@v0.1.0-esm/index.mjs";import r from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-function@v0.1.1-esm/index.mjs";import i from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-has-own-property@v0.1.1-esm/index.mjs";import o from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-constant-function@v0.1.1-esm/index.mjs";import m from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-noop@v0.1.1-esm/index.mjs";import{factory as d}from"https://cdn.jsdelivr.net/gh/stdlib-js/random-base-chisquare@v0.1.0-esm/index.mjs";import a from"https://cdn.jsdelivr.net/gh/stdlib-js/math-base-assert-is-nan@v0.1.1-esm/index.mjs";import l from"https://cdn.jsdelivr.net/gh/stdlib-js/array-to-json@v0.1.0-esm/index.mjs";import u from"https://cdn.jsdelivr.net/gh/stdlib-js/string-format@v0.1.1-esm/index.mjs";import{isPrimitive as p}from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-positive-number@v0.1.1-esm/index.mjs";function g(e,t){return p(e)?p(t)?null:new TypeError(u("invalid argument. Second argument must be a positive number. Value: `%s`.",t)):new TypeError(u("invalid argument. First argument must be a positive number. Value: `%s`.",e))}function f(e,t,n){return e(t)/t/(e(n)/n)}function h(){var p,h,j,c,v,b,y;if(0===arguments.length)p=d();else if(1===arguments.length){if(!s(h=arguments[0]))throw new TypeError(u("invalid argument. Options argument must be an object. Value: `%s`.",h));if(i(h,"prng")){if(!r(h.prng))throw new TypeError(u("invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.","prng",h.prng));p=d({prng:h.prng})}else p=d(h)}else{if(v=g(b=arguments[0],y=arguments[1]))throw v;if(arguments.length>2){if(!s(h=arguments[2]))throw new TypeError(u("invalid argument. Options argument must be an object. Value: `%s`.",h));if(i(h,"prng")){if(!r(h.prng))throw new TypeError(u("invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.","prng",h.prng));p=d({prng:h.prng})}else p=d(h)}else p=d()}return c=void 0===b?G:V,j=p.PRNG,e(c,"NAME","f"),h&&h.prng?(e(c,"seed",null),e(c,"seedLength",null),n(c,"state",o(null),m),e(c,"stateLength",null),e(c,"byteLength",null),e(c,"toJSON",o(null))):(t(c,"seed",x),t(c,"seedLength",w),n(c,"state",E,O),t(c,"stateLength",L),t(c,"byteLength",N),e(c,"toJSON",T)),e(c,"PRNG",j),c;function x(){return j.seed}function w(){return j.seedLength}function L(){return j.stateLength}function N(){return j.byteLength}function E(){return j.state}function O(e){j.state=e}function T(){var e={type:"PRNG"};return e.name=c.NAME,e.state=l(j.state),e.params=void 0===b?[]:[b,y],e}function V(){return f(p,b,y)}function G(e,t){return a(e)||a(t)||e<=0||t<=0?NaN:f(p,e,t)}}var j=h();e(j,"factory",h);export{j as default,h as factory};
//# sourceMappingURL=index.mjs.map
